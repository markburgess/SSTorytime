services:
  postgres:
    image: postgres:17-alpine
    container_name: sstorytime-postgres
    environment:
      POSTGRES_USER: sstoryline
      POSTGRES_PASSWORD: sst_1234
      POSTGRES_DB: sstoryline
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sstoryline"]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sstorytime-server
    ports:
      - "8080:8080"
    environment:
      - SST_DB_HOST=postgres
      - SST_DB_PORT=5432
      - SST_DB_NAME=sstoryline
      - SST_DB_USER=sstoryline
      - SST_DB_PASSWORD=sst_1234
    depends_on:
      postgres:
        condition: service_healthy
    command: ["./http_server"]

  cli:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sstorytime-cli
    environment:
      - SST_DB_HOST=postgres
      - SST_DB_PORT=5432
      - SST_DB_NAME=sstoryline
      - SST_DB_USER=sstoryline
      - SST_DB_PASSWORD=sst_1234
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./examples:/app/examples
      - ./SSTconfig:/app/SSTconfig
    command: ["sleep", "infinity"]  # Keep container alive for exec commands
    profiles:
      - tools  # Only start with --profile tools

volumes:
  postgres_data:
